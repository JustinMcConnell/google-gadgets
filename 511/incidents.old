<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="http://www.talisweb.com/justin/gmodules/module.xsl"?>
<Module>
  <ModulePrefs
    title="__UP_title__"
    directory_title="Bay Area Traffic"
    title_url="http://traffic.511.org/"
    description="Realtime traffic information for the San Francisco Bay Area via 511.org"
    author="Justin McConnell"
    author_email="boolean+gmodules@gmail.com"
    author_affiliation="http://www.talisweb.com/justin/"
    author_location="San Francisco, CA 94107"
    screenshot="http://boolean.googlepages.com/511_screenshot.png"
    thumbnail="http://boolean.googlepages.com/511_thumbnail.png"
    render_inline="required"
    scaling="true"
    scrolling="false"
    singleton="true">
    <Locale lang="en" country="us" />
  </ModulePrefs>

  <UserPref name="title"    display_name="Title"     default_value="Bay Area Traffic" />
  <UserPref name="height"   display_name="Height"    default_value="200" />
  <UserPref name="bestfit"  display_name="Best Fit"  default_value="Yes" datatype="enum">
    <EnumValue value="Yes"  display_value="Yes" />
    <EnumValue value="No"   display_value="No"  />
  </UserPref>
  <UserPref name="fontsize" display_name="Font Size" default_value="75%" datatype="enum">
    <EnumValue value="60%"  display_value="Smaller" />
    <EnumValue value="67%"  display_value="Small"   />
    <EnumValue value="75%"  display_value="Medium"  />
    <EnumValue value="90%"  display_value="Large"   />
    <EnumValue value="105%" display_value="Larger"  />
  </UserPref>

  <UserPref name="sort"        default_value="" datatype="hidden" />
  <UserPref name="narrow_text" default_value="" datatype="hidden" />
  <UserPref name="narrow_list" default_value="" datatype="hidden" />

  <Content type="html">
    <![CDATA[

    <script src="http://boolean.googlepages.com/tinyformatDate.js" type="text/javascript"></script>

    <script type="text/javascript">

      var key_sort__MODULE_ID__  = "sort";
      var key_filtt__MODULE_ID__ = "narrow_text"
      var key_filtl__MODULE_ID__ = "narrow_list"
      var base_511__MODULE_ID__  = "http://traffic.511.org/";
      var base_img__MODULE_ID__  = "http://www.talisweb.com/justin/gmodules/511/";
      var prefs__MODULE_ID__;
      var list__MODULE_ID__;

      _IG_RegisterOnloadHandler(main);

      function main() {
        prefs__MODULE_ID__ = new _IG_Prefs(__MODULE_ID__);

        _IG_FetchContent(base_511__MODULE_ID__+"traffic_text_all.asp?a="+Math.random(), function(html) {

          var divData = "data__MODULE_ID__";
          var divGUI  = "gui__MODULE_ID__";
          var divBox  = "container__MODULE_ID__";
          list__MODULE_ID__ = new IncidentList(divData, divGUI, divBox);

          // get rid of all text outside the table that contains the data we want
          var pos1 = html.indexOf('<table summary="Traffic incident listing" class="text-data sortable" id="data1">');
          var pos2 = html.indexOf("</table>", pos1);

          if(pos1 > -1 && pos2 > -1) {
            html = html.substring(pos1+81, pos2);

            // replace long descriptions with shorter ones
            html = html.replace("Estimated duration:", "Duration");
            html = html.replace("Start time", "Start");
            // add a pipe to the end of the descriptions so the split further down works
            html = html.replace("Description", "Description|");

            // replace carrots with char codes so we don't parse out images later on
            html = html.replace(/<(img.*?)>/g, "&lt;$1&gt;");
            // replace relative image paths with absolute ones
            html = html.replace(/images(\/)/g, base_img__MODULE_ID__+"$1");
            // deliminate fields with |
            html = html.replace(/<a href="(traffic_text_\w*?_detail\.asp\?id=\d*?)">/g, "|$1|");
            html = html.replace(/<\/td>/g, "|");

            // get rid of all html tags
            html = html.replace(/<.*?>/g, "");
            // get rid of whitespace
            html = html.replace(/\s{2,}/g, " ");
            // quick formatting for description field
            html = html.replace(/\s\:\s/g, ": ");
            // trim whitespace and extra | from end of the string
            html = html.replace(/\|\s+$/, "");
            html = html.replace(/More info on /g, "");

            var parts = html.split("|");
            parts.shift();
            for(var i=0; i<parts.length; i+=7) {
              // parse the start datetime of the incident
              var re = /([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{1,2})\s([0-9]{1,2}):([0-9]{1,2})\&nbsp;(pm|am)/;
              var backrefs   = re.exec(parts[i+2].trim());
              var startYear  = parseInt("20"+backrefs[3]);
              var startMonth = parseInt(backrefs[1]-1);
              var startHour  = parseInt(backrefs[4]);

              // next two if blocks are military time adjustments
              if(backrefs[6].toLowerCase() == "pm" && startHour != 12)
                startHour += 12;
              if((backrefs[6].toLowerCase() == "am" && startHour == 12) || startHour == 24)
                startHour = 0;

              var startDate = new Date(startYear, startMonth, backrefs[2], startHour, backrefs[5]);
              list__MODULE_ID__.add(new Incident(parts[i],
                                                 parts[i+1],
                                                 startDate,
                                                 parts[i+3],
                                                 parts[i+4],
                                                 parts[i+5],
                                                 parts[i+6]));
            }
          }

          // set default sort and filter
          list__MODULE_ID__.sort(prefs__MODULE_ID__.getString(key_sort__MODULE_ID__) || "where");
          list__MODULE_ID__.setFilterList(prefs__MODULE_ID__.getString(key_filtl__MODULE_ID__) || "hide");
          list__MODULE_ID__.setFilterText(prefs__MODULE_ID__.getString(key_filtt__MODULE_ID__) || "");
          list__MODULE_ID__.filter(list__MODULE_ID__.getFilterText(),
                                   list__MODULE_ID__.getFilterList());
          list__MODULE_ID__.render();

          // adjust height of the module to be as short as possible
          list__MODULE_ID__.setHeight(prefs__MODULE_ID__.getString("height"), prefs__MODULE_ID__.getString("bestfit"));

          modifyEditDiv__MODULE_ID__();

        });
      }

      /**
       * Stores the list of traffic incidents and is becoming the bloated brain class
       */
      function IncidentList() {
        this.incidents  = [];
        this.sortKey    = "";
        this.filterText = "";
        this.filterList = "";
        this.lastScreen = "";
        this.divData    = arguments[0];
        this.divGUI     = arguments[1];
        this.divBox     = arguments[2];
        this.bestFitOn  = prefs__MODULE_ID__.getString("bestfit").toLowerCase() == "yes";
      }

      /**
       * Add an incident object to the list
       */
      IncidentList.prototype.add = function(incident) {
        if(typeof incident != "object")
          return false;
        this.incidents.push(incident);
      }

      /**
       * Get an incident object based on its 511.org incident id
       */
      IncidentList.prototype.get = function(incident_id) {
        for(var i=0; i<this.incidents.length; i++) {
          if(this.incidents[i].id == incident_id)
            return this.incidents[i];
        }
        return false;
      }

      /**
       * Get the number of incidents in the list.
       */
      IncidentList.prototype.length = function() {
        return this.incidents.length;
      }


      /**
       * Get/Set the key on which the list orders the incidents.
       */
      IncidentList.prototype.getSortKey = function() {
        return this.sortKey || "";
      }
      IncidentList.prototype.setSortKey = function(key) {
        if(!key || typeof key != "string") {
          return false;
        }

        this.sortKey = key;
        return true;
      }


      /**
       * Get/Set the show/hide flag for filtering the incidents.
       */
      IncidentList.prototype.getFilterList = function() {
        return this.filterList || "";
      }
      IncidentList.prototype.setFilterList = function(str) {
        if(!str || typeof str != "string")
          return false;

        this.filterList = str;
        return true;
      }

      /**
       * Get/Set the text to filter the incidents with.
       */
      IncidentList.prototype.getFilterText = function() {
        return this.filterText || "";
      }
      IncidentList.prototype.setFilterText = function(str) {
        if(typeof str != "string")
          return false;

        this.filterText = str;
        return true;
      }


      /**
       * Wraps some caching around _IG_Prefs.set()
       */
      IncidentList.prototype.save = function() {
        var key    = arguments[0];
        var val    = arguments[1];
        if(!val) {
          if(key == key_sort__MODULE_ID__ && this.sortKey)
            val = this.sortKey;
          else if(key == key_filtl__MODULE_ID__ && this.filterList)
            val = this.filterList;
          else if(key == key_filtt__MODULE_ID__ && (this.filterText || this.filterText==""))
            val = this.filterText;
        }
        //var oldVal = prefs__MODULE_ID__["e"][key];
        var oldVal = prefs__MODULE_ID__.getString(key);
        //console.log("save "+key+" -> "+val+" ("+oldVal+")");

        if(key && val != oldVal) {
          //console.log("save")
          prefs__MODULE_ID__.set(key, val);
        }
        else //console.log("skip")

        return true;
      }

      /**
       * Set the title of the gadget.
       */
      IncidentList.prototype.setTitle = function(title) {
        _gel("m___MODULE_ID___url").innerHTML = title;
      }

      /**
       * Set the font size of the gadget.
       */
      IncidentList.prototype.setFontSize = function(size) {
        _gel(this.divBox).style.fontSize = size;
      }

      /**
       * Set the height of the gadget's container div.  This can be a specific pixel
       * value.  Or If bestfit is true then it will get the height of the content when
       * it is finished loading and set the container height to be exactly that.
       */
      IncidentList.prototype.setHeight = function() {
        var height  = arguments[0] || "";
        var bestfit = arguments[1] || "";
        // do bestfit if height isn't a number

        if(height.toLowerCase() == "yes") {
          bestfit = "yes";
        }
        else if(height.toLowerCase() == "no") {
          bestfit = "no";
        }

        if(bestfit.toLowerCase() == "yes") {
          // don't make the gadget shorter than this
          var min          = 200;
          var user_height  = _gel("m___MODULE_ID___1").value;
          // content height
          var stuff_height = _gel(this.divData).offsetHeight +
                             _gel("d_header__MODULE_ID__").offsetHeight;
          // container height
          //var box_height   = _gel(this.divBox).offsetHeight;
          console.log("stuff: " + stuff_height + " user: " + user_height);

          // set minimum height
          if(stuff_height <= min) {
            _gel(this.divBox).style.height = min + "px";
          }
          // set computed height
          else {
            if(stuff_height <= user_height) {
              _gel(this.divBox).style.height = stuff_height + "px";
            }
          }
          console.log("set " + _gel(this.divBox).style.height);

          this.bestFitOn = true;
        }
        else {
          if(!height) {
            height = prefs__MODULE_ID__.getString("height");
          }
          _gel(this.divBox).style.height = height + "px";
          console.log("set " + _gel(this.divBox).style.height);
          this.bestFitOn = false;
        }
      }


      /**
       * Show or hide incidents based on the text the user typed.
       */
      IncidentList.prototype.filter = function(str, flag) {
        var rhsides = str.toLowerCase().replace(", ", ",").split(",");
        var rhs     = "";
        for(var i=0; i<this.incidents.length; i++) {
          for(var j=0; j<rhsides.length; j++) {
            rhs = rhsides[j].trim();
            if(!rhs && j>0)
              continue;

            var lhs = this.incidents[i].route.toLowerCase();
            if(str == "") {
              this.incidents[i].displayAll = "block";
              j=rhsides.length;
            }
            else if(lhs.indexOf(rhs) != -1 && flag == "show") {
              this.incidents[i].displayAll = "block";
              j=rhsides.length;
            }
            else if(lhs.indexOf(rhs) != -1) {
              this.incidents[i].displayAll = "none";
              j=rhsides.length;
            }
            else if(lhs.indexOf(rhs) == -1 && flag == "show")
              this.incidents[i].displayAll = "none";
            else
              this.incidents[i].displayAll = "block";
          }
        }

        this.setFilterText(str);
        this.setFilterList(flag);
      }

      /**
       * Sort the list of incidents
       */
      IncidentList.prototype.sort = function() {
        if(arguments[0])
          this.setSortKey(arguments[0]);
        var key = this.getSortKey();
        var lhs1, lhs2, rhs1, rhs2;

        this.incidents.sort(function(a, b) {
          // time sorts by time
          if(key == "when") {
            lhs1 = b.getDateObj();
            rhs1 = a.getDateObj();
            lhs2 = "";
            rhs2 = "";
          }
          // type sorts by incident type then location
          else if(key == "type") {
            lhs1 = a["type"];
            rhs1 = b["type"];
            lhs2 = a["route"];
            rhs2 = b["route"];
          }
          // location sorts by location then time
          else if(key == "where") {
            lhs1 = highwayName__MODULE_ID__(a["route"]);
            rhs1 = highwayName__MODULE_ID__(b["route"]);
            lhs2 = b.getDateObj();
            rhs2 = a.getDateObj();
          }
          // title sorts by title then location
          else if(key == "title") {
            lhs1 = a["title"];
            rhs1 = b["title"];
            lhs2 = a["route"];
            rhs2 = b["route"];
          }

          if(lhs1 > rhs1) {
            return 1;
          }
          else if(lhs1 < rhs1) {
            return -1;
          }
          else {
            if(lhs2 > rhs2)
              return 1;
            else if(lhs2 < rhs2)
              return -1;
            else
              return 0;
          }
        });

        if(arguments[1]) {
          this.renderData();
        }
      }

      IncidentList.prototype.render = function() {
        this.renderGUI();
        this.renderData();
      }

      IncidentList.prototype.renderGUI = function() {
        var html    = "";
        var divName = this.divGUI;
        if(!_gel(divName))
          return;

        if(arguments[0]) {
          html = ""+
            "    <table border='0' cellspacing='0' id='d_header__MODULE_ID__'><tbody><tr>\n"+
            "    <td id='d_sort__MODULE_ID__' class='enabled'>"+
            "    </td>\n"+
            "    <td id='d_narrow__MODULE_ID__' class='enabled'>"+
            "    </td>\n"+
            "    <td id='d_help__MODULE_ID__' class='active'>\n"+
            "      <a href='' onclick='list__MODULE_ID__.toggleHelp(); return false;' title='Return to traffic information'><img src='"+base_img__MODULE_ID__+"icon_help.gif' width='16' height='16' /> Help</a>"+
            "    </td>\n"+
            "    </tr></tbody></table>";
        }
        else {
          html = ""+
            "    <table border='0' cellspacing='0' id='d_header__MODULE_ID__'><tbody><tr>\n"+
            "    <td id='d_sort__MODULE_ID__' class='enabled'>"+
            "      <a href='' onclick='menuClick__MODULE_ID__(\"d_sort__MODULE_ID__\", \"d_sort_edit__MODULE_ID__\"); return false;' title='Sort the list of traffic incidents'><img src='"+base_img__MODULE_ID__+"icon_sort.gif' width='16' height='16' /> Sort</a>"+
            "    </td>\n"+
            "    <td id='d_narrow__MODULE_ID__' class='enabled'>"+
            "      <a href='' onclick='menuClick__MODULE_ID__(\"d_narrow__MODULE_ID__\", \"d_narrow_edit__MODULE_ID__\"); return false;' title='Narrow the list of traffic incidents'><img src='"+base_img__MODULE_ID__+"icon_narrow.gif' width='16' height='16' /> Narrow</a>"+
            "    </td>\n"+
            "    <td id='d_help__MODULE_ID__' class='enabled'>\n"+
            "      <a href='' onclick='list__MODULE_ID__.toggleHelp(); return false;' title='Get help for this gadget.'><img src='"+base_img__MODULE_ID__+"icon_help.gif' width='16' height='16' /> Help</a>"+
            "    </td>\n"+
            "    </tr></tbody></table>";
        }

        html += ""+
          "    <div id='d_sort_edit__MODULE_ID__'>"+
          "    Sort incidents by <select onchange='if(this.selectedIndex>=0) {sort__MODULE_ID__(this.options[this.selectedIndex].value);}' onblur='list__MODULE_ID__.save(key_sort__MODULE_ID__);' title='Sort the list of traffic incidents'>\n"+
          "        <option value='type' title='Sort by incident type, then by location.' "+(this.getSortKey()=="type" ? "selected='selected'" : "")+">type</option>\n"+
          "        <!--<option value='title' title='Sort by incident title, then by location.' "+(this.getSortKey()=="title" ? "selected='selected'" : "")+">Title</option>-->\n"+
          "        <option value='where' title='Sort by incident location, then by time.' "+(this.getSortKey()=="where" ? "selected='selected'" : "")+">where they occured</option>\n"+
          "        <option value='when' title='Sort by incident time.' "+(this.getSortKey()=="when" ? "selected='selected'" : "")+">when they occured</option>\n"+
          "      </select>\n"+
          "    </div>\n"+

          "    <div id='d_narrow_edit__MODULE_ID__'>"+
          "    <form>"+
          "    <select id='d_narrow_sel__MODULE_ID__' onchange='filter__MODULE_ID__(this.form.d_narrow_txt__MODULE_ID__.value, this.options[this.selectedIndex].value);' onblur='list__MODULE_ID__.save(key_filtl__MODULE_ID__);'>"+
          "      <option value='show' "+(this.getFilterList()=="show" ? "selected='selected'" : "")+">Show</option>"+
          "      <option value='hide' "+(this.getFilterList()=="hide" ? "selected='selected'" : "")+">Hide</option>"+
          "    </select>"+
          "    incidents that happen at "+
          "    <img src='"+base_img__MODULE_ID__+"icon_arrow_tdr.gif' width='16' height='16' /><br />"+
          "    <input type='text' onkeyup='filter__MODULE_ID__(this.value, this.form.d_narrow_sel__MODULE_ID__.options[this.form.d_narrow_sel__MODULE_ID__.selectedIndex].value);' onblur='list__MODULE_ID__.save(key_filtt__MODULE_ID__);' id='d_narrow_txt__MODULE_ID__' value='"+this.getFilterText()+"' /><br /><span class='example'>(US-101, CA-1 N, Market Street, etc.)</span>"+
          "    </form>"+
          "    </div>\n\n";

        _gel(divName).innerHTML = html;
      }

      IncidentList.prototype.renderData = function() {
        var html    = "";
        var divName = this.divData;
        if(!_gel(divName))
          return;

        for(var i=0; i<this.incidents.length; i++) {
          var c_incident = this.incidents[i];
          if(c_incident.displayAll == "none")
            continue;

          var c_style   = i>0 ? "" : "border-top:0;";
          var c_icon    = c_incident.icon.replace("&lt;", "<").replace("&gt;", ">");
          var c_class   = c_incident.displayInfo == "none" ? "i_top " : "i_top_on ";
          var c_time    = c_incident.type.toLowerCase() != "construction" ?
                          "    <td class='i_time'>" +c_incident.getTime()+ "</td>" :
                          "";

          var c_whenfor = "";
          switch(c_incident.type.toLowerCase()) {
            case "construction":
              c_whenfor = "This construction began on " + c_incident.getDateObj().formatDate("l, F j") + ".";
              break;
            case "event":
              c_whenfor = "This event will start at " +c_incident.getTime()+ " and should last about " +minutesToMinHours__MODULE_ID__(c_incident.duration)+ ".";
              break;
            case "incident":
              c_whenfor = "This incident was reported at " +c_incident.getTime()+ " and should last about " +minutesToMinHours__MODULE_ID__(c_incident.duration)+ ".";
              break;
          }

          var map_link = "";
          if(c_incident.street && c_incident.city)
            map_link = ""+
              "<a href='http://maps.google.com/maps?q="+encodeURI(c_incident.street+(c_incident.cross ? " and " +c_incident.cross : "")+", " +c_incident.city+ ", CA")+ "' target='_blank'>Map</a>";


          html += ""+
            "  <div class='i_item'>"+
            "  <table class='"+c_class+"' id='i_top"+c_incident.id+"' style='"+c_style+"' onclick='incidentClick__MODULE_ID__(\""+c_incident.id+"\");' onmouseover='styleOver__MODULE_ID__(\"i_top"+c_incident.id+"\");' onmouseout='styleOut__MODULE_ID__(\"i_top"+c_incident.id+"\");' border='0' cellspacing='0' width='100%'><tbody><tr>"+
            "  \n"+
            "    <td class='i_title'><span>" +c_incident.route+ "</span>"+
                 (c_incident.title ? ", " +c_incident.title : "")+
            "    </td>"+
            c_time+
            "    <td class='i_icon'>" +c_icon+ "</td>"+
            "  </tr></tbody></table>\n"+
            "  <div class='i_bot' id='i_bot"+c_incident.id+"' style='display:"+c_incident.displayInfo+";'>\n"+
            "    <div class='i_desc'>" +c_incident.desc+ "</div>\n"+
            "    <div class='i_whenfor'>"+c_whenfor+"</div>\n"+
            "    <div class='i_link'>"+
            "    "+(c_incident.doMap? map_link+" <span class='separator'>|</span>": "")+
            "      <a href='"+base_511__MODULE_ID__+c_incident.link+"' target='_blank'>More info</a>\n"+
            "    </div>\n"+
            "  </div>\n"+
            "  </div>\n\n";
        }

        if(!html && this.length() == 0)
          html = "<div class='error'>D'oh! It looks like 511.org might be down at the moment.  Try reloading in a minute or two.</div>";
        else if(!html)
          html = "<div class='error'>Oops! You narrowed the incidents down to nothing.  Try broadening your search a bit.</div>";

        _gel(divName).innerHTML = html;

        this.lastScreen = "incidents";
      }

      IncidentList.prototype.renderHelp = function() {
        var divName = this.divData;
        if(!_gel(divName))
          return;
        var html = _gel("help_html__MODULE_ID__").innerHTML;
        if(html)
          _gel(divName).innerHTML = html;
        this.lastScreen = "help";
      }

      IncidentList.prototype.toggleHelp = function() {
        if(this.lastScreen == "help")
          this.render();
        else {
          this.renderGUI(1);
          this.renderHelp();
        }
      }




      function Incident() {
        this.icon        = arguments[0].trim() || "";
        this.type        = (/title="([a-zA-z]*?)"/.exec(this.icon))[1];
        this.route       = arguments[1].trim() || "";
        this.start       = arguments[2]        || new Date();
        this.duration    = arguments[3].trim() || "";
        this.desc        = arguments[4].trim() || "";
        this.link        = arguments[5].trim() || "";
        this.id          = this.link.substring(this.link.indexOf("id=")+3);
        this.title       = (arguments[6] || "").replace(/-/g, " ").toProperCase().trim();
        this.title       = this.title.substring(0, this.title.indexOf("On")).trim();
        this.displayInfo = "none";  // none or block
        this.displayAll  = "block";  // none or block
        this.street      = "";
        this.cross       = "";
        this.city        = "";
        this.doMap       = false;

        var matches = /^(.*):\s*(.*?)\s(on|before|after|to|entering at|exiting at|at|area of|past|approaching)\s(.*?)(\s(on|before|after|to|entering at|exiting at|at|area of|past|approaching)\s(.*?)\s*)?\((.*)\)\s*(.*)$/.exec(this.desc);
        if(matches) {
          if(matches[7])
            this.street  = normAddress__MODULE_ID__(matches[7]).trim();
          if(matches[4])
            this.cross   = normAddress__MODULE_ID__(matches[4]).trim();
          if(matches[8])
            this.city    = matches[8].trim();
          if(!this.street && this.cross) {
            this.street = this.cross;
            this.cross  = "";
          }
        }
        //else alert("Miss" + this.route + " - " + this.start);

        if(this.street && this.city.toLowerCase() != "unincorporated")
          this.doMap = true;
      }

      Incident.prototype.getDate = function() {
        if(this.start)
          return this.start.formatDate("l");
        return "";
      }

      Incident.prototype.getDateObj = function() {
        if(this.start)
          return this.start;
        return "";
      }

      Incident.prototype.getTime = function() {
        if(this.start)
          return this.start.formatDate("g:i a");
        return "";
      }




      /**
       * Set edit controls and their associated CSS back to what is stored in user prefs.
       */
      function setFromPrefs__MODULE_ID__() {
        var c_obj, c_pref;

        // set gadget title if it has changed
        c_obj  = _gel("m___MODULE_ID___0");
        c_pref = prefs__MODULE_ID__.getString("title");
        if(c_obj.value.toLowerCase() != c_pref.toLowerCase()) {
          list__MODULE_ID__.setTitle(c_pref);
          c_obj.value = c_pref;
        }

        // get height and bestfit
        var c_hobj    = _gel("m___MODULE_ID___1");
        var c_bobj    = _gel("m___MODULE_ID___2");
        var c_height  = prefs__MODULE_ID__.getString("height");
        var c_bestfit = prefs__MODULE_ID__.getString("bestfit").toLowerCase();
        var either    = false;

        // set edit control height
        if(c_hobj.value.toLowerCase() != c_height) {
          c_hobj.value = c_height;
          either = true;
        }

        // set edit control bestfit
        if(c_bobj.options[c_bobj.selectedIndex].value.toLowerCase() != c_bestfit) {
          for(var i=0; i<c_bobj.options.length; i++) {
            if(c_bobj.options[i].value.toLowerCase() == c_bestfit)
              c_bobj.selectedIndex = i;
          }
          either = true;
        }

        // set gadget height
        if(either)
          list__MODULE_ID__.setHeight(c_height, c_bestfit);


        // set fontsize
        var c_fontsize = prefs__MODULE_ID__.getString("fontsize").toLowerCase();
        c_obj = _gel("m___MODULE_ID___3");
        if(c_obj.options[c_obj.selectedIndex].value.toLowerCase() != c_fontsize) {
          list__MODULE_ID__.setFontSize(c_fontsize);

          for(var i=0; i<c_obj.options.length; i++) {
            if(c_obj.options[i].value.toLowerCase() == c_fontsize)
              c_obj.selectedIndex = i;
          }
        }
      }

      /**
       * Set CSS based on edit controls
       */
      function setFromEditDiv__MODULE_ID__() {
        var objTitle    = _gel("m___MODULE_ID___0");
        list__MODULE_ID__.setFontSize(objTitle.value);

        var objHeight   = _gel("m___MODULE_ID___1");
        var objBestfit  = _gel("m___MODULE_ID___2");
        list__MODULE_ID__.setHeight(objHeight.value,
                                    objBestfit.options[objBestfit.selectedIndex].value);
        var objFontsize = _gel("m___MODULE_ID___3");
        list__MODULE_ID__.setFontSize(objFontsize.options[objFontsize.selectedIndex].value);
      }

      /**
       * Play with the DOM and events so that the edit controls are much smarter.
       */
      function modifyEditDiv__MODULE_ID__() {
        // gadget title
        var objTitle = _gel("m___MODULE_ID___0");
        if(typeof objTitle.onkeyup == "function")
          objTitle.onkeyup = function() {
            objTitle.onkeyup(); list__MODULE_ID__.setTitle(objTitle.value);
          };
        else
          objTitle.onkeyup = function() {
            list__MODULE_ID__.setTitle(objTitle.value);
          };

        if(typeof objTitle.onfocus == "function")
          objTitle.onfocus = function() {
            objTitle.onfocus();
            objectHighlight__MODULE_ID__("*title", "on");
          };
        else
          objTitle.onfocus = function() {
            objectHighlight__MODULE_ID__("*title", "on");
          };

        if(typeof objTitle.onblur == "function")
          objTitle.onblur = function() {
            objTitle.onblur();
            objectHighlight__MODULE_ID__("*title", "off");
          };
        else
          objTitle.onblur = function() {
            objectHighlight__MODULE_ID__("*title", "off");
          };


        // gadget height
        var objHeight = _gel("m___MODULE_ID___1");
        var objBestfit = _gel("m___MODULE_ID___2");

        if(typeof objHeight.onkeyup == "function")
          objHeight.onkeyup = function() {
            objHeight.onkeyup();
            list__MODULE_ID__.setHeight(objHeight.value, objBestfit.options[objBestfit.selectedIndex].value);
          };
        else
          objHeight.onkeyup = function() {
            list__MODULE_ID__.setHeight(objHeight.value, objBestfit.options[objBestfit.selectedIndex].value);
          };

        if(typeof objHeight.onfocus == "function")
          objHeight.onfocus = function() {
            objHeight.onfocus();
            objectHighlight__MODULE_ID__('*gadget', 'on');
          };
        else
          objHeight.onfocus = function() {
            objectHighlight__MODULE_ID__('*gadget', 'on');
          };

        if(typeof objHeight.onblur == "function")
          objHeight.onblur = function() {
            objHeight.onblur();
            objectHighlight__MODULE_ID__('*gadget', 'off');
          };
        else
          objHeight.onblur = function() {
            objectHighlight__MODULE_ID__('*gadget', 'off');
          };

        // bestfit
        if(typeof objBestfit.onchange == "function")
          objBestfit.onchange = function() {
            objBestfit.onchange();
            list__MODULE_ID__.setHeight(objHeight.value, objBestfit.options[objBestfit.selectedIndex].value);
          };
        else
          objBestfit.onchange = function() {
            list__MODULE_ID__.setHeight(objHeight.value, objBestfit.options[objBestfit.selectedIndex].value);
          };

        if(typeof objBestfit.onfocus == "function")
          objBestfit.onfocus = function() {
            objBestfit.onfocus();
            objectHighlight__MODULE_ID__('*gadget', 'on');
          };
        else
          objBestfit.onfocus = function() {
            objectHighlight__MODULE_ID__('*gadget', 'on');
          };

        if(typeof objBestfit.onblur == "function")
          objBestfit.onblur = function() {
            objBestfit.onblur();
            objectHighlight__MODULE_ID__('*gadget', 'off');
          };
        else
          objBestfit.onblur = function() {
            objectHighlight__MODULE_ID__('*gadget', 'off');
          };


        // fontsize
        var objFontsize = _gel("m___MODULE_ID___3");
        if(typeof objFontsize.onchange == "function")
          objFontsize.onchange = function() {
            objFontsize.onchange();
            list__MODULE_ID__.setFontSize(objFontsize.options[objFontsize.selectedIndex].value);
          };
        else
          objFontsize.onchange = function() {
            list__MODULE_ID__.setFontSize(objFontsize.options[objFontsize.selectedIndex].value);
          };


        // don't let the edit controls' form reset itself and clobber settings
        _gel("m___MODULE_ID___form").reset = setFromPrefs__MODULE_ID__;

        // cancel link now resets the form controls' content from user prefs
        _gel("m___MODULE_ID___e").childNodes[1].onclick = function() {
          _gel("m___MODULE_ID___form").reset = setFromPrefs__MODULE_ID__;
          return  _cedit("__MODULE_ID__");
        };

        // save button saves user prefs without a page refresh
        _gel("save___MODULE_ID__").onclick = function(){
          _gel("m___MODULE_ID___form").reset = function(){};
          list__MODULE_ID__.save('title', objTitle.value);
          list__MODULE_ID__.save('height', objHeight.value);
          list__MODULE_ID__.save('bestfit', objBestfit.options[objBestfit.selectedIndex].value);
          list__MODULE_ID__.save('fontsize', objFontsize.options[objFontsize.selectedIndex].value);
          return _cedit("__MODULE_ID__");
        };
      }


      /**
       * Place a border around an HTMLElement.
       * @param name - id of the HTMLElement to highlight.  *gadget and *height are prewired to
       *   wrap the whole gadget or just the gadget's title.
       * @param flag - on or off to turn the highlight on or off
       * @param args - if this empty set the style to all borders.  if it contains
       *   any of the keywords top, right, bottom or left it will set those borders appropriately.
       */
      function objectHighlight__MODULE_ID__() {
        var flag = arguments[1] || "";
        var args = arguments[2] || "";
        var name = arguments[0] || "";
        if(name == "*gadget")
          name = "m___MODULE_ID__";
        else if(name == "*title")
          name = "m___MODULE_ID___url";
        if(!name)
          return false;

        var obj = _gel(name);
        var tborder, rborder, bborder, lborder;
        var style = "1px solid yellow";

        // turn the highlight on
        if(flag == "on") {
          // set to individual borders
          if(args){
            if(args.indexOf("top") != -1)
              tborder = style;
            if(args.indexOf("right") != -1)
              rborder = style;
            if(args.indexOf("bottom") != -1)
              bborder = style;
            if(args.indexOf("left") != -1)
              lborder = style;
          }
          // set the style to all borders
          else
            tborder = rborder = bborder = lborder = style;
        }
        // turn the highlight off
        else if(flag == "off")
          tborder = rborder = bborder = lborder = "0";
        else
          tborder = rborder = bborder = lborder = "0";

        obj.style.borderTop    = tborder || "0";
        obj.style.borderRight  = rborder || "0";
        obj.style.borderBottom = bborder || "0";
        obj.style.borderLeft   = lborder || "0";
      }


      /**
       * Wrapper around sorting the list of traffic incidents
       */
      function sort__MODULE_ID__(field) {
        if(list__MODULE_ID__)
          list__MODULE_ID__.sort(field, 1);
      }

      /**
       * Wrapper around filtering the list of traffic incidents
       */
      function filter__MODULE_ID__(str, val) {
        if(list__MODULE_ID__) {
          list__MODULE_ID__.filter(str, val);
          list__MODULE_ID__.renderData();
        }
      }

      /**
       * Do some stuff when the user fires mouseover on a traffic incident quick info
       */
      function styleOver__MODULE_ID__(divTop) {
        if(typeof divTop == "string")
          divTop = _gel(divTop);
        var divBottom = _gel("i_bot" + divTop.id.substring(5));
        divTop.style.cursor = "pointer";

        if(divBottom.style.display != "block") {
          divTop.className = "i_top_over";
        }
      }

      /**
       * Do some stuff when the user fires mouseout on a traffic incident quick info
       */
      function styleOut__MODULE_ID__(divTop) {
        if(typeof divTop == "string")
          divTop = _gel(divTop);
        var divBottom = _gel("i_bot" + divTop.id.substring(5));

        divTop.style.cursor = "default";
        if(divBottom.style.display == "none") {
          divTop.className = "i_top";
        }
      }

      /**
       * Show or hide extended details for a traffic incident.
       * @param incident_id - 511.org incident id
       */
      function incidentClick__MODULE_ID__(incident_id) {
        var incident  = list__MODULE_ID__.get(incident_id);
        var divBottom = _gel("i_bot" + incident_id);
        var divTop    = _gel("i_top" + incident_id);
        if(!divBottom.style.display || divBottom.style.display == "none") {
          divTop.className        = "i_top_on";
          incident.displayInfo    = "block";
          divBottom.style.display = incident.displayInfo;
        }
        else {
          divTop.className        = "i_top";
          incident.displayInfo    = "none";
          divBottom.style.display = incident.displayInfo;
        }
      }

      /**
       * Pretty print an integer number of minutes to minutes, hours, days, etc.
       * 1   -> 1 minute
       * 35  -> 35 minutes
       * 125 -> 2 hours and 5 minutes
       */
      function minutesToMinHours__MODULE_ID__(minutes) {
        var answer = minutes;
        if(typeof minutes == "string")
          minutes = parseInt(minutes);
        if(typeof minutes != "number")
          return answer;

        if(minutes == 1)
          answer = "1 minute";
        else if(minutes < 60)
          answer = minutes + " minutes";
        else if(minutes == 60)
          answer = "1 hour";
        else if(minutes > 60 && minutes < 1440 && minutes % 60 == 0)
          answer = Math.floor(minutes / 60) + " hours";
        else if(minutes > 60 && minutes < 1440)
          answer = Math.floor(minutes / 60) + " hours and " + (minutes % 60) + " minutes";
        else if(minutes == 1440)
          answer = "1 day";

        return answer;
      }

      /**
       * Strip the leading letters and dash from a highway name.
       * I-280 -> 280
       * CA-1 N -> 1 N
       */
      function highwayName__MODULE_ID__(str) {
        if(matches = /(I|US|CA)-(.*)/.exec(str)) {
          return matches[2];
        }
        return str;
      }

      /**
       * Scrub highways names down to a common format.  This is here mainly for Google to
       * better recognize addresses in the form of "Street and Highway, City, State".
       */
      function normAddress__MODULE_ID__(addr) {
        return addr.replace("N Northbound", "")
                   .replace("S Southbound", "")
                   .replace("W Westbound", "")
                   .replace("E Eastbound", "")
                   .replace("Northbound", "")
                   .replace("Southbound", "")
                   .replace("Westbound", "")
                   .replace("Eastbound", "");
      }


      /**
       * Show or hide the sort or narrow menus
       * @param elm - The HTMLElement that gets styled
       * @param elm2 - The HTMLElement that gets shown or hidden
       */
      function menuClick__MODULE_ID__(elm, elm2) {
        if(typeof elm != "object")
          elm = _gel(elm);
        if(typeof elm2 != "object")
          elm2 = _gel(elm2);

        var doHeight = (elm.id == "d_narrow__MODULE_ID__" ? true : false);

        if(elm.className.indexOf("active") == -1) {
          elm.className += " active";
        }
        else {
          elm.className = elm.className.replace("active", "");
          if(doHeight) list__MODULE_ID__.setHeight("yes");
        }

        toggleElement__MODULE_ID__(elm2);
      }



      /**
       * Show or hide a HTMLElement
       */
      function toggleElement__MODULE_ID__(elm) {
        if(typeof elm != "object")
          elm = _gel(elm);

        if(!elm.style.display || elm.style.display == "none")
          elm.style.display = "block";
        else
          elm.style.display = "none";
      }

      /**
       * Add trim to the String
       */
      String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/, "");
      };

      /**
       * http://www.codeproject.com/jscript/propercase.asp
       */
      String.prototype.toProperCase = function() {
        return this.toLowerCase().replace(/^(.)|\s(.)/g,
            function($1) { return $1.toUpperCase(); });
      }

      /**
       * http://www.robertnyman.com/2005/11/07/the-ultimate-getelementsbyclassname/
       */
      function getElementsByClassName__MODULE_ID__(oElm, strTagName, strClassName){
        var arrElements = (strTagName == "*" && document.all)? document.all : oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\\-");
        var oRegExp = new RegExp("(^|\\s)" + strClassName + "(\\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
          oElement = arrElements[i];
          if(oRegExp.test(oElement.className)){
            arrReturnElements.push(oElement);
          }
        }
        return (arrReturnElements)
      }
    </script>


    <style type="text/css" title="incidents__MODULE_ID__">
    #debug__MODULE_ID__ {
      font-size: inherit;
      border: 1px solid #808080;
      margin: 1px;
    }

    #gui__MODULE_ID__ {
      font-size: inherit;
    }
    #data__MODULE_ID__ {
      font-family: Arial, Helvetica, sans-serif;
      font-size: inherit;
    }
    #container__MODULE_ID__ {
      font-size: __UP_fontsize__;
      background: white;
      color: black;
      overflow: auto;
      padding-right: 4px;
    }
    #container__MODULE_ID__ p {
      font-size: inherit;
      margin: 0;
    }
    #container__MODULE_ID__ .tail {
      margin-bottom: 13px;
    }
    #container__MODULE_ID__ h3 {
      font-size: inherit;
      border-bottom: 2px solid #e5ecf9;
      padding: 2px;
      margin-bottom: 3px;
    }
    #container__MODULE_ID__ a img {
      border: 0;
    }
    #container__MODULE_ID__ form {
      display: inline;
    }

    #container__MODULE_ID__ dl {
    }
    #container__MODULE_ID__ dt {
      color: #1B4618;
      font-weight: bold;
    }
    #container__MODULE_ID__ dd {
      margin-left: 5px;
      padding-left: 5px;
    }


    #d_header__MODULE_ID__ {
      font-family: sans-serif;
      font-size: inherit;
      width: 100%;
      background: #FFFFCC;
      border-bottom: 2px solid #cdd3de;
    }
    #d_header__MODULE_ID__ div {
      font-size: inherit;
      font-family: sans-serif;
      font-weight: bold;
    }
    #d_narrow_edit__MODULE_ID__ select, #d_narrow_edit__MODULE_ID__ input,
    #d_sort_edit__MODULE_ID__ select, #d_sort_edit__MODULE_ID__ input {
      font-size: inherit;
    }

    #d_sort__MODULE_ID__ {
      font-size: inherit;
      text-align: left;
      width: 33%;
      padding: 2px;
    }
    #d_sort_edit__MODULE_ID__ {
      display: none;
      font-size: inherit;
      background: #FFFFCC;
      padding: 2px;
      border-bottom: 2px solid #cdd3de;
    }

    #d_narrow__MODULE_ID__ {
      font-size: inherit;
      text-align: center;
      width: 33%;
      padding: 2px;
    }
    #d_narrow_edit__MODULE_ID__ {
      display: none;
      font-size: inherit;
      background: #FFFFCC;
      padding: 2px;
      border-bottom: 2px solid #cdd3de;
    }
    #d_narrow_txt__MODULE_ID__ {
      width: 100%;
    }

    #d_help__MODULE_ID__ {
      font-size: inherit;
      text-align: right;
      width: 33%;
      padding: 2px;
    }

    #d_help__MODULE_ID__ li {
      margin-bottom: 5px;
      margin-left: 10px;
      border: 1px solid green;
    }


    .i_item {
      font-size: inherit;
      width: 100%;
    }
    .i_top {
      font-size: inherit;
      border-top: 1px dotted #cdd3de;
      border-bottom: 0;
      background: transparent;
      padding: 0;
    }
    .i_top_over {
      font-size: inherit;
      border-top: 1px dotted #cdd3de;
      border-bottom: 0;
      background: #e5ecf9;
      padding: 0;
    }
    .i_top_on {
      font-size: inherit;
      border-top: 1px solid #cdd3de;
      background: #e5ecf9;
      padding: 0;
    }
    .i_bot {
      font-size: inherit;
      padding: 2px;
      padding-bottom: 5px;
      background: url("http://www.talisweb.com/justin/gmodules/511/infobg.gif") repeat-x bottom;
    }
    .i_title {
      font-size: inherit;
      padding-left: 2px;
      vertical-align: middle;
    }
    .i_title span {
      font-weight: bold;
    }
    .i_time {
      font-size: 95%;
      font-weight: normal;
      text-align: right;
      color: #808080;
      white-space: nowrap;
      vertical-align: middle;
    }
    .i_icon {
      width: 17px;
      vertical-align: middle;
    }
    .i_icon img {

    }
    .i_whenfor {
      font-size: inherit;
      margin-top: 10px;
    }
    .i_desc {
      font-size: inherit;
    }
    .i_link {
      font-size: inherit;
      text-align: right;
      margin-top: 5px;
    }
    .i_link a {
      font-size: inherit;
      text-decoration: underline;
      color: blue;
    }
    .i_top, .i_icon, .i_icon img, .i_title {
      cursor: pointer;
    }


    .enabled {
      font-weight: bold;
    }
    .enabled a {
      color: black;
      text-decoration: none;
    }
    .active {
      font-weight: bold;
    }
    .active a {
      color: #1B4618;
      /*#000088;*/
      text-decoration: none;
    }
    .error {
      font-size: inherit;
    }
    .example {
      font-style: italic;
      color: #707070;
    }
    .separator {
      color: #A0A0A0;
    }

    ul.normlist {
      list-style-type: circle;
      padding-left: 15px;
      margin-left: 15px;
      margin-top: 5px;
      padding-top: 5px;
    }
    ul.normlist li {
      font-size: inherit;
    }
    ul.normlist li img {
      margin-right: 3px;
    }

    ul.barelist {
      list-style-type: none;
      padding-left: 0;
      margin-left: 0;
      margin-top: 5px;
      padding-top: 5px;
    }
    ul.barelist li {
      font-size: inherit;
    }
    ul.barelist li img {
      margin-right: 3px;
    }
    .myh3 {
      font-size: inherit;
      font-weight: bold;
      border-bottom: 2px solid #e5ecf9;
      padding: 2px;
      margin-bottom: 3px;
    }
    </style>

    <!--[if IE]>
    <style type="text/css" title="incidents__MODULE_ID__">
    #gui__MODULE_ID__ {

    }
    #data__MODULE_ID__ {
      font-family: Arial, Helvetica, sans-serif;

    }
    #container__MODULE_ID__ {

      background: white;
      color: black;
      overflow: auto;
      padding-right: 4px;
    }
    #container__MODULE_ID__ p {

      margin-top: 0;
    }
    #container__MODULE_ID__ .tail {
      margin-bottom: 13px;
    }

    #container__MODULE_ID__ a img {
      border: 0;
    }
    #container__MODULE_ID__ form {
      display: inline;
    }
    #container__MODULE_ID__ dl {
    }
    #container__MODULE_ID__ dt {
      color: #1B4618;
      font-weight: bold;
    }
    #container__MODULE_ID__ dd {
      margin-left: 5px;
      padding-left: 5px;
    }


    #d_header__MODULE_ID__ {
      font-family: sans-serif;
      width: 100%;
      background: #FFFFCC;
      border-bottom: 2px solid #cdd3de;
    }
    #d_header__MODULE_ID__ div {
      font-family: sans-serif;
      font-weight: bold;
    }
    #d_narrow_edit__MODULE_ID__ select, #d_narrow_edit__MODULE_ID__ input,
    #d_sort_edit__MODULE_ID__ select, #d_sort_edit__MODULE_ID__ input {

    }

    #d_sort__MODULE_ID__ {
      font-size: __UP_fontsize__;
      text-align: left;
      width: 33%;
      padding: 2px;
    }
    #d_sort_edit__MODULE_ID__ {
      display: none;
      background: #FFFFCC;
      padding: 2px;
      border-bottom: 2px solid #cdd3de;
    }

    #d_narrow__MODULE_ID__ {
      font-size: __UP_fontsize__;
      text-align: center;
      width: 33%;
      padding: 2px;
    }
    #d_narrow_edit__MODULE_ID__ {
      display: none;
      background: #FFFFCC;
      padding: 2px;
      border-bottom: 2px solid #cdd3de;
    }
    #d_narrow_txt__MODULE_ID__ {
      width: 100%;
    }

    #d_help__MODULE_ID__ {
      font-size: __UP_fontsize__;
      text-align: right;
      width: 33%;
      padding: 2px;
    }

    #d_help__MODULE_ID__ li {
      margin-bottom: 5px;
      margin-left: 10px;
      border: 1px solid green;
    }


    .i_item {
      width: 100%;
    }
    .i_top {
      border-top: 1px dotted #cdd3de;
      border-bottom: 0;
      background: transparent;
      padding: 0;
    }
    .i_top_over {
      border-top: 1px dotted #cdd3de;
      border-bottom: 0;
      background: #e5ecf9;
      padding: 0;
    }
    .i_top_on {
      border-top: 1px solid #cdd3de;
      background: #e5ecf9;
      padding: 0;
    }
    .i_bot {
      padding: 2px;
      padding-bottom: 5px;
      background: url("http://www.talisweb.com/justin/gmodules/511/infobg.gif") repeat-x bottom;
    }
    .i_title {
      font-size: __UP_fontsize__;
      padding-left: 2px;
      vertical-align: middle;
    }
    .i_title span {
      font-weight: bold;
    }
    .i_time {
      font-size: __UP_fontsize__;
      text-align: right;
      color: #808080;
      white-space: nowrap;
      vertical-align: middle;
    }
    .i_icon {
      width: 17px;
      vertical-align: middle;
    }
    .i_icon img {

    }
    .i_whenfor {
      margin-top: 10px;
    }
    .i_desc {

    }
    .i_link {
      text-align: right;
      margin-top: 5px;
    }
    .i_link a {
      text-decoration: underline;
      color: blue;
    }
    .i_top, .i_icon, .i_icon img, .i_title {
      cursor: pointer;
    }


    .enabled {
      font-weight: bold;
    }
    .enabled a {
      color: black;
      text-decoration: none;
    }
    .active {
      font-weight: bold;
    }
    .active a {
      color: #1B4618;
      text-decoration: none;
    }

    .active a:visited, .enabled a:visited {
      color: #1B4618;
      text-decoration: none;
    }

    .error {

    }
    .example {
      font-style: italic;
      color: #707070;
    }
    .separator {
      color: #A0A0A0;
    }

    ul.normlist {
      list-style-type: circle;
      padding-left: 15px;
      margin-left: 15px;
      margin-top: 5px;
      padding-top: 5px;
    }
    ul.normlist li {

    }
    ul.normlist li img {
      margin-right: 3px;
    }

    ul.barelist {
      list-style-type: none;
      padding-left: 0;
      margin-left: 0;
      margin-top: 5px;
      padding-top: 5px;
    }
    ul.barelist li {

    }
    ul.barelist li img {
      margin-right: 3px;
    }
    .myh3 {
      font-size: inherit;
      font-weight: bold;
      border-bottom: 2px solid #e5ecf9;
      padding: 2px;
      margin-bottom: 3px;
    }
    </style>

    <![endif]-->

    <dv id="debug__MODULE_ID__"></div>

    <div id="container__MODULE_ID__" style="height: __UP_height__px;">
      <div id="gui__MODULE_ID__"><img src="http://www.talisweb.com/justin/gmodules/511/loading2.gif" width="16" height="16" style="margin-top:3px;" /> Loading traffic information from 511.org</div>
      <div id="data__MODULE_ID__"></div>
    </div>


    <div id="help_html__MODULE_ID__" style="display:none;">
      <div class="myh3" id="h_overview__MODULE_ID__" style="margin-top:0;">Overview</div>
      <p class="tail">This gadget displays realtime traffic information for the San Francisco Bay Area.  All data is obtained from <a href="http://www.511.org/" target="_blank">511.org</a>.</p>

      <div class="myh3" style="margin-top:0;">Table of Contents</div>
      <ul class="normlist">
        <li><a href="#h_overview__MODULE_ID__">Overview</a></li>
        <li><a href="#h_icons__MODULE_ID__">Traffic Icons</a></li>
        <li><a href="#h_sort__MODULE_ID__">How to Sort</a></li>
        <li><a href="#h_narrow__MODULE_ID__">How to Narrow</a></li>
        <li><a href="#h_prefs__MODULE_ID__">Setting Preferences</a></li>
        <li><a href="#h_credits__MODULE_ID__">Credits</a></li>
        <li><a href="#h_compatibility__MODULE_ID__">Compatibility</a></li>
        <li><a href="#h_about__MODULE_ID__">About the Author</a></li>
      </ul>

      <div class="myh3" id="h_icons__MODULE_ID__">Traffic Icons</div>
      <ul class="barelist">
        <li><img src="http://www.talisweb.com/justin/gmodules/511/icon_incidents.gif" width="16" height="16" title="Incident" />Incidents refer to traffic accidents, stalled vehicles, debris, short term road construction, etc. that affect traffic conditions.</li>
        <li><img src="http://www.talisweb.com/justin/gmodules/511/icon_events.gif" width="16" height="16" title="Event" />Events refer to sporting events, concerts, parades, and any other public event that can affect traffic.</li>
        <li><img src="http://www.talisweb.com/justin/gmodules/511/icon_construction.gif" width="16" height="16" title="Construction" />Construction refers to areas where long term road construction is affecting traffic.</li>
      </ul>

      <div class="myh3" id="h_sort__MODULE_ID__">How to Sort</div>
      <div class="tail">
        <p>Use the sort function to set the order in which the traffic items display.</p>
        <dl class="tail">
          <dt>Type</dt><dd>Sorts by incident type, then by location.</dd>
          <dt>Where</dt><dd>Sorts by incident location, then by time.</dd>
          <dt>When</dt><dd>Sorts by incident time.</dd>
        </dl>

      <div class="myh3" id="h_narrow__MODULE_ID__">How to Narrow</div>
        <p>Use the narrow function to permanently show or hide traffic items you define.</p>
        <dl class="tail">
          <dt>Select hide then type I-880</dt><dd>Shows all items except those that occur at I-880.</dd>
          <dt>Select show then type I-280, US-101</dt><dd>Shows only items that occur at I-280 or US-101.</dd>
          <dt>Clear the text field</dt><dd>Shows all items.</dd>
        </dl>
        <p>Parts of highways and road names work as well.  So typing 280 will work if you don't want to type I-280, and typing 80 will catch all items that happen at I-80, I-280, I-380, etc.</p>
      </div>

      <div class="myh3" id="h_prefs__MODULE_ID__">Setting Preferences</div>
      <p class="tail">This gadget takes Google's familiar, blue edit window to a whole new level.  Changes are now seen in real time as you type.  If you don't like what you see just click cancel.  Plus, saving no longer requires reloading the page.  <a href="" onclick="return _edit(__MODULE_ID__);">Try it!</a></p>
      <dl class="tail">
        <dt onmouseover="objectHighlight__MODULE_ID__('*title', 'on');" onmouseout="objectHighlight__MODULE_ID__('*title', 'off');">Title</dt><dd>The text that appears in the upper left hand corner of the gadget.</dd>
        <dt onmouseover="objectHighlight__MODULE_ID__('*gadget', 'on', 'left');" onmouseout="objectHighlight__MODULE_ID__('*gadget', 'off');">Height</dt><dd>The height of the gadget in pixels.</dd>
        <dt>Best Fit</dt><dd>Collapse the gadget height to the height of the list.  The gadget will never be taller than the height you specify above.  But it might make itself shorter to match the height of all the traffic items.</dd>
        <dt>Font Size</dt><dd>The size of the text.</dd>
      </dl>

      <div class="myh3" id="h_credits__MODULE_ID__">Credits</div>
      <ul class="normlist tail">
        <li>Data from <a href="http://traffic.511.org/" target="_blank">511.org</a></li>
        <li>
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_incidents.gif" width="16" height="16" title="Incident"/>
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_events.gif" width="16" height="16" title="Event" />
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_construction.gif" width="16" height="16" title="Construction"/>
          icons by <a href="http://traffic.511.org/" target="_blank">511.org</a>
        </li>
        <li>
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_sort.gif" width="16" height="16" title="Sort"/>
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_narrow.gif" width="16" height="16" title="Narrow" />
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_help.gif" width="16" height="16" title="Help"/>
          <img src="http://www.talisweb.com/justin/gmodules/511/icon_arrow_tdr.gif" width="16" height="16" />
          <img src="http://www.talisweb.com/justin/gmodules/511/loading2.gif" width="16" height="16" />
          icons by <a href="http://www.famfamfam.com/lab/icons/silk/" target="_blank">famfamfam.com</a>
        </li>
      </ul>

      <div class="myh3" id="h_compatibility__MODULE_ID__">Compatibility</div>
      <p>This gadget has been observed playing reasonably well with the following browsers</p>
      <ul class="normlist">
        <li>Firefox 1.5</li>
        <li>Internet Explorer 6 and 7</li>
        <li>Opera 8.51+ and 9</li>
      </ul>
      <p class="tail">If you are an OS X user and can test this gadget with Safari, please let me know how it works.</p>

      <div class="myh3" id="h_about__MODULE_ID__">About the Author</div>
      <p class="tail">If inclined, send comments, questions or criticisms to the author"s <a href="mailto:boolean+gmodule@gmail.com">e-mail</a> or <a href="http://www.talisweb.com/justin/" target="_blank">webpage</a>.</p>

    </div>

    ]]>
  </Content>
</Module>
